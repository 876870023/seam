name: Build CLI Releases

permissions:
  contents: write

on:
  push:
    tags:
      - v_cli.*

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.changelog_reader.outputs.changes }}
      version: ${{ steps.changelog_reader.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3
      - name: Get version number
        run: |
          VERSION=${{github.ref_name}}
          echo "VERSION=${VERSION/v_cli\./}" >> $GITHUB_ENV
      - name: Changelog Reader
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2.2.2
        with:
          path: './crates/cli/CHANGELOG.md'
          version: ${{ env.VERSION }}

  build-cross:
    needs: create_release
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        target:
          - i686-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - armv7-unknown-linux-gnueabihf
          - arm-unknown-linux-gnueabi
          - arm-unknown-linux-gnueabihf
          - arm-unknown-linux-musleabi
          - arm-unknown-linux-musleabihf
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.target }}
          toolchain: stable
          default: true
          override: true

      - name: Install cross
        run: cargo install cross

      - name: Build ${{ matrix.target }}
        timeout-minutes: 120
        run: |
          compile_target=${{ matrix.target }}

          # if [[ "$compile_target" == *"-linux-"* || "$compile_target" == *"-apple-"* ]]; then
          #   compile_features="-f local-redir -f local-tun"
          # fi

          if [[ "$compile_target" == "mips-"* || "$compile_target" == "mipsel-"* || "$compile_target" == "mips64-"* || "$compile_target" == "mips64el-"* ]]; then
            sudo apt-get update -y && sudo apt-get install -y upx;
            if [[ "$?" == "0" ]]; then
              compile_compress="-u"
            fi
          fi

          cd build
          chmod +x build-release
          ./build-release -t ${{ matrix.target }} $compile_features $compile_compress

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Seam CLI ${{ needs.create_release.outputs.version }}
          body: |
            ${{ needs.create_release.outputs.changes }}
          files: build/release/*
          draft: false
          prerelease: false

  build-unix:
    runs-on: ${{ matrix.os }}
    env:
      BUILD_EXTRA_FEATURES: ''
      RUST_BACKTRACE: full
    strategy:
      matrix:
        os: [macos-latest]
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v3

      - name: Install GNU tar
        if: runner.os == 'macOS'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.target }}
          toolchain: stable
          default: true
          override: true

      - name: Build release
        shell: bash
        run: |
          chmod +x ./build/build-host-release
          ./build/build-host-release -t ${{ matrix.target }}

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Seam CLI ${{ needs.create_release.outputs.version }}
          body: |
            ${{ needs.create_release.outputs.changes }}
          files: build/release/*
          draft: false
          prerelease: false

  build-windows:
    runs-on: windows-latest
    env:
      RUSTFLAGS: '-C target-feature=+crt-static'
      RUST_BACKTRACE: full
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          override: true

      - name: Build release
        run: |
          pwsh ./build/build-host-release.ps1

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Seam CLI ${{ needs.create_release.outputs.version }}
          body: |
            ${{ needs.create_release.outputs.changes }}
          files: build/release/*
          draft: false
          prerelease: false
